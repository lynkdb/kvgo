// Copyright 2015 Eryx <evorui at gmail dot com>, All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: kvapi.proto

package kvapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Kvgo_Write_FullMethodName  = "/lynkdb.kvapi.v2.Kvgo/Write"
	Kvgo_Delete_FullMethodName = "/lynkdb.kvapi.v2.Kvgo/Delete"
	Kvgo_Read_FullMethodName   = "/lynkdb.kvapi.v2.Kvgo/Read"
	Kvgo_Range_FullMethodName  = "/lynkdb.kvapi.v2.Kvgo/Range"
	Kvgo_Batch_FullMethodName  = "/lynkdb.kvapi.v2.Kvgo/Batch"
)

// KvgoClient is the client API for Kvgo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvgoClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*ResultSet, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultSet, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ResultSet, error)
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*ResultSet, error)
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
}

type kvgoClient struct {
	cc grpc.ClientConnInterface
}

func NewKvgoClient(cc grpc.ClientConnInterface) KvgoClient {
	return &kvgoClient{cc}
}

func (c *kvgoClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, Kvgo_Write_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, Kvgo_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, Kvgo_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, Kvgo_Range_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, Kvgo_Batch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvgoServer is the server API for Kvgo service.
// All implementations must embed UnimplementedKvgoServer
// for forward compatibility
type KvgoServer interface {
	Write(context.Context, *WriteRequest) (*ResultSet, error)
	Delete(context.Context, *DeleteRequest) (*ResultSet, error)
	Read(context.Context, *ReadRequest) (*ResultSet, error)
	Range(context.Context, *RangeRequest) (*ResultSet, error)
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	mustEmbedUnimplementedKvgoServer()
}

// UnimplementedKvgoServer must be embedded to have forward compatible implementations.
type UnimplementedKvgoServer struct {
}

func (UnimplementedKvgoServer) Write(context.Context, *WriteRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedKvgoServer) Delete(context.Context, *DeleteRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKvgoServer) Read(context.Context, *ReadRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedKvgoServer) Range(context.Context, *RangeRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (UnimplementedKvgoServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedKvgoServer) mustEmbedUnimplementedKvgoServer() {}

// UnsafeKvgoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvgoServer will
// result in compilation errors.
type UnsafeKvgoServer interface {
	mustEmbedUnimplementedKvgoServer()
}

func RegisterKvgoServer(s grpc.ServiceRegistrar, srv KvgoServer) {
	s.RegisterService(&Kvgo_ServiceDesc, srv)
}

func _Kvgo_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kvgo_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvgo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kvgo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvgo_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kvgo_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvgo_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kvgo_Range_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvgo_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kvgo_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kvgo_ServiceDesc is the grpc.ServiceDesc for Kvgo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kvgo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lynkdb.kvapi.v2.Kvgo",
	HandlerType: (*KvgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Kvgo_Write_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Kvgo_Delete_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Kvgo_Read_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _Kvgo_Range_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _Kvgo_Batch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvapi.proto",
}

const (
	KvgoAdmin_DatabaseList_FullMethodName   = "/lynkdb.kvapi.v2.KvgoAdmin/DatabaseList"
	KvgoAdmin_DatabaseCreate_FullMethodName = "/lynkdb.kvapi.v2.KvgoAdmin/DatabaseCreate"
	KvgoAdmin_DatabaseUpdate_FullMethodName = "/lynkdb.kvapi.v2.KvgoAdmin/DatabaseUpdate"
	KvgoAdmin_SysGet_FullMethodName         = "/lynkdb.kvapi.v2.KvgoAdmin/SysGet"
)

// KvgoAdminClient is the client API for KvgoAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvgoAdminClient interface {
	DatabaseList(ctx context.Context, in *DatabaseListRequest, opts ...grpc.CallOption) (*ResultSet, error)
	DatabaseCreate(ctx context.Context, in *DatabaseCreateRequest, opts ...grpc.CallOption) (*ResultSet, error)
	DatabaseUpdate(ctx context.Context, in *DatabaseUpdateRequest, opts ...grpc.CallOption) (*ResultSet, error)
	SysGet(ctx context.Context, in *SysGetRequest, opts ...grpc.CallOption) (*ResultSet, error)
}

type kvgoAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewKvgoAdminClient(cc grpc.ClientConnInterface) KvgoAdminClient {
	return &kvgoAdminClient{cc}
}

func (c *kvgoAdminClient) DatabaseList(ctx context.Context, in *DatabaseListRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, KvgoAdmin_DatabaseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoAdminClient) DatabaseCreate(ctx context.Context, in *DatabaseCreateRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, KvgoAdmin_DatabaseCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoAdminClient) DatabaseUpdate(ctx context.Context, in *DatabaseUpdateRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, KvgoAdmin_DatabaseUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvgoAdminClient) SysGet(ctx context.Context, in *SysGetRequest, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, KvgoAdmin_SysGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvgoAdminServer is the server API for KvgoAdmin service.
// All implementations must embed UnimplementedKvgoAdminServer
// for forward compatibility
type KvgoAdminServer interface {
	DatabaseList(context.Context, *DatabaseListRequest) (*ResultSet, error)
	DatabaseCreate(context.Context, *DatabaseCreateRequest) (*ResultSet, error)
	DatabaseUpdate(context.Context, *DatabaseUpdateRequest) (*ResultSet, error)
	SysGet(context.Context, *SysGetRequest) (*ResultSet, error)
	mustEmbedUnimplementedKvgoAdminServer()
}

// UnimplementedKvgoAdminServer must be embedded to have forward compatible implementations.
type UnimplementedKvgoAdminServer struct {
}

func (UnimplementedKvgoAdminServer) DatabaseList(context.Context, *DatabaseListRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseList not implemented")
}
func (UnimplementedKvgoAdminServer) DatabaseCreate(context.Context, *DatabaseCreateRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseCreate not implemented")
}
func (UnimplementedKvgoAdminServer) DatabaseUpdate(context.Context, *DatabaseUpdateRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUpdate not implemented")
}
func (UnimplementedKvgoAdminServer) SysGet(context.Context, *SysGetRequest) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysGet not implemented")
}
func (UnimplementedKvgoAdminServer) mustEmbedUnimplementedKvgoAdminServer() {}

// UnsafeKvgoAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvgoAdminServer will
// result in compilation errors.
type UnsafeKvgoAdminServer interface {
	mustEmbedUnimplementedKvgoAdminServer()
}

func RegisterKvgoAdminServer(s grpc.ServiceRegistrar, srv KvgoAdminServer) {
	s.RegisterService(&KvgoAdmin_ServiceDesc, srv)
}

func _KvgoAdmin_DatabaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoAdminServer).DatabaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvgoAdmin_DatabaseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoAdminServer).DatabaseList(ctx, req.(*DatabaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvgoAdmin_DatabaseCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoAdminServer).DatabaseCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvgoAdmin_DatabaseCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoAdminServer).DatabaseCreate(ctx, req.(*DatabaseCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvgoAdmin_DatabaseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoAdminServer).DatabaseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvgoAdmin_DatabaseUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoAdminServer).DatabaseUpdate(ctx, req.(*DatabaseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvgoAdmin_SysGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvgoAdminServer).SysGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvgoAdmin_SysGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvgoAdminServer).SysGet(ctx, req.(*SysGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KvgoAdmin_ServiceDesc is the grpc.ServiceDesc for KvgoAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvgoAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lynkdb.kvapi.v2.KvgoAdmin",
	HandlerType: (*KvgoAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DatabaseList",
			Handler:    _KvgoAdmin_DatabaseList_Handler,
		},
		{
			MethodName: "DatabaseCreate",
			Handler:    _KvgoAdmin_DatabaseCreate_Handler,
		},
		{
			MethodName: "DatabaseUpdate",
			Handler:    _KvgoAdmin_DatabaseUpdate_Handler,
		},
		{
			MethodName: "SysGet",
			Handler:    _KvgoAdmin_SysGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvapi.proto",
}
