// Copyright 2015 Eryx <evorui at gmail dot com>, All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lynkdb.kvapi.v2;

option optimize_for = LITE_RUNTIME;
option go_package = "./;kvapi";

// import "google/protobuf/struct.proto";

// KeyValue is a pair of Key and Value for returned Key/Value pairs
message KeyValue {
  Meta meta = 1;
  bytes key = 2;
  bytes value = 3;
}

// Meta defines metadata for Key/Value pairs
message Meta {
  // epoch id
  uint64 version = 1;

  // first create time. unix time in milliseconds.
  // int64 created = 2;

  // last update time. unix time in milliseconds.
  int64 updated = 3;

  // various scalable attribute tags
  uint64 attrs = 4;

  // value checksum
  uint64 checksum = 5;

  // value size
  int32 size = 6;

  // increasing namespace:id
  uint32 incr_ns = 9;
  uint64 incr_id = 10;

  // TTL time. unix time in milliseconds.
  int64 expired = 11;

  // user defined data field
  bytes extra = 16;
}

message WriteRequest {
  string database = 1;

  bytes key = 2;
  bytes value = 3;

  Meta meta = 4;

  uint64 attrs = 5;
  bool create_only = 6;

  uint64 prev_version = 7;
  uint64 prev_checksum = 8;
  uint64 prev_incr_id = 9;
  uint64 prev_attrs = 10;

  string incr_namespace = 16;
}

message DeleteRequest {
  string database = 1;

  bytes key = 2;

  uint64 attrs = 5;

  uint64 prev_version = 7;
  uint64 prev_checksum = 8;
  uint64 prev_attrs = 10;
}

message ReadRequest {
  string database = 1;
  repeated bytes keys = 2;
  uint64 attrs = 5;
}

message RangeRequest {
  string database = 1;
  bytes lower_key = 2;
  bytes upper_key = 3;
  uint64 attrs = 5;
  int64 limit = 8;
  bool revert = 9;
}

message RequestUnion {
  oneof value {
    WriteRequest write = 1;
    DeleteRequest delete = 2;
    ReadRequest read = 3;
    RangeRequest range = 4;
  }
}

message BatchRequest {
  string database = 1;
  repeated RequestUnion items = 9;
}

message BatchResponse {
  uint32 status_code = 1;
  string status_message = 2;

  repeated ResultSet items = 9;  // `x_attrs:"rows"`
}

message Status {
  uint32 code = 1;
  string message = 2;
}

message ResultSet {
  uint32 status_code = 1;
  string status_message = 2;

  repeated KeyValue items = 9;  // `x_attrs:"rows"`
  uint64 max_version = 10;

  repeated bytes next_keys = 16;
  bool next_result_set = 17;
  string next_token = 18;
}

service Kvgo {
  rpc Write(WriteRequest) returns (ResultSet) {}
  rpc Delete(DeleteRequest) returns (ResultSet) {}
  rpc Read(ReadRequest) returns (ResultSet) {}
  rpc Range(RangeRequest) returns (ResultSet) {}
  rpc Batch(BatchRequest) returns (BatchResponse) {}
}

// message DatabaseDescriptor {
message Database {
  string id = 1;  // `x_attrs:"primary_key"`
  string name = 2;
  string engine = 3;
  uint32 replica_num = 4;
  string desc = 5;
  int64 shard_size = 6;  // unit in MiB

  message KeyStat {
    bytes key = 1;
  }

  repeated KeyStat key_stats = 16;
}

message DatabaseListRequest {}

message DatabaseCreateRequest {
  string name = 2;         // `x_attrs:"create_required"`
  string engine = 3;       // `x_value_limits:"v2" x_enums:"v2"`
  uint32 replica_num = 4;  // `x_value_limits:"1,1,5"`
  string desc = 5;         //
  int64 shard_size = 6;    // unit in MiB `x_value_limits:"64,8192,524288"`
  map<string, string> options = 9;
}

message DatabaseUpdateRequest {
  string name = 2;         // `x_attrs:"update_required"`
  string engine = 3;       // `x_value_limits:"v2" x_enums:"v2"`
  uint32 replica_num = 4;  // `x_value_limits:"1,1,5"`
  string desc = 5;         //
  int64 shard_size = 6;    // unit in MiB `x_value_limits:"64,8192,524288"`
}

message DatabaseListResponse {
  repeated Database items = 9;  // `x_attrs:"rows"`
}

// message StatusRequest {}

// message SysGetRequest {
//   string name = 1;
//   int64 limit = 2;
//   map<string, string> params = 3;
// }

// service KvgoAdmin {
//   rpc DatabaseList(DatabaseListRequest) returns (ResultSet) {}
//   rpc DatabaseCreate(DatabaseCreateRequest) returns (ResultSet) {}
//   rpc DatabaseUpdate(DatabaseUpdateRequest) returns (ResultSet) {}
//   rpc SysGet(SysGetRequest) returns (ResultSet) {}
// }
