// Copyright 2015 Eryx <evorui at gmail dot com>, All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lynkdb.kvapi.v2;

option optimize_for = LITE_RUNTIME;
option go_package = "./;kvapi";

import "kvapi.proto";
// import "google/protobuf/any.proto";

message LogMeta {
  uint64 id = 1;
  uint64 version = 2;
  uint64 attrs = 3;
  int64 expired = 4;
  int64 created = 5;
  int32 size = 6;
  bytes key = 7;
  uint64 replica_id = 8;

  // value checksum
  uint64 checksum = 9;
}

message RawKeyValue {
  bytes key = 1;
  bytes value = 2;
}

message DatabaseMap {
  message Replica {
    uint64 id = 1;
    uint64 store_id = 3;
    uint64 prev = 4;
    uint64 action = 7;
  }
  message Shard {
    uint64 id = 1;
    uint64 version = 2;
    uint64 prev = 4;
    bytes lower_key = 5;
    uint64 action = 7;
    repeated Replica replicas = 9;
    int64 updated = 15;
  }
  enum JobType {
    UnSpec = 0;
    Split = 1;
    Merge = 2;
    Rebalance = 3;
  }
  message JobDescriptor {
    string id = 1;
    uint64 version = 2;
    JobType type = 3;
    repeated uint64 shard_ids = 4;
    map<uint64, uint64> replica_moves = 5;
    int64 updated = 15;
  }
  string id = 1;
  uint64 version = 2;
  repeated Shard shards = 9;
  repeated JobDescriptor jobs = 10;
  uint64 incr_id = 13;
  int64 updated = 15;
}

message DatabaseMapStatus {
  message SyncPull {
    uint64 map_version = 1;
    uint64 version = 2;
    uint64 action = 3;
  }
  message Replica {
    uint64 map_version = 1;
    uint64 log_version = 2;
    uint64 action = 7;
    int64 used = 8;
    // map<uint64, SyncPull> pulls = 9;
    int64 updated = 15;
  }
  message IncrOffset {
    uint32 id = 1;
    string ns = 2;
    uint64 offset = 3;
    uint64 cutset = 4;
  }
  map<uint64, Replica> replicas = 9;
  repeated IncrOffset incr_offsets = 10;
}

message SysNode {
  string id = 1;
}

message SysStoreStatus {
  uint64 id = 1;
  string uni_id = 2;
  int64 capacity_used = 8;
  int64 capacity_free = 9;
  int64 load_cycle_count = 10;
  int64 replica_bounds = 11;
  map<string, string> options = 14;
  int64 updated = 15;
  int64 log_used = 16;
  int64 meta_used = 17;
  int64 data_used = 18;
  int64 ttl_used = 19;
}

message SysNodeStatus {
  string id = 1;
  string addr = 2;
  string version = 3;
  int64 uptime = 8;
  map<string, SysCapacity> caps = 9;
  int64 updated = 15;
}

message SysCapacity {
  int64 use = 1;
  int64 min = 2;
  int64 max = 3;
}

message SysStoreDescriptor {
  uint64 id = 1;
  string uni_id = 2;
  uint64 node_id = 3;
  int64 created = 14;
}

message WriteProposalRequest {
  uint64 id = 1;
  WriteRequest write = 2;
  // uint64 expired = 3;
}

message DeleteProposalRequest {
  uint64 id = 1;
  bytes key = 2;
  Meta meta = 3;
  uint64 attrs = 4;
  // uint64 expired = 4;
}

message LogRangeRequest {
  string database = 1;
  uint64 shard_id = 2;
  uint64 replica_id = 3;
  uint64 lower_log = 4;
  uint64 upper_log = 5;
  string offset_token = 12;
}

message LogRangeResponse {
  Status status = 1;
  string server_id = 2;
  string database_id = 3;
  // uint64 log_left = 7;
  uint64 log_offset = 8;
  repeated LogMeta items = 9;
  bool next_result_set = 10;
  bool log_offset_outrange = 11;
  string next_offset_token = 12;
  string transfer_jod_id = 13;
}

message LogKeyRangeRequest {
  string db_id = 1;
  uint64 shard_id = 2;
  uint64 replica_id = 3;
  bytes lower_key = 4;
  bytes upper_key = 5;
}

message LogKeyRangeResponse {
  repeated Meta items = 9;
  bool next_result_set = 10;
}

message AuditLog {
  string id = 1;
  string name = 2;
  string content = 3;
  int64 created = 14;
}

message InnerReadRequest {
  string database = 1;
  repeated bytes keys = 3;
  uint64 attrs = 5;
  string log_range_token = 6;
}

// message TransferJob {
//   message Source {
//     string addr = 1;
//     string database = 2;
//     // access_key =3;
//   }
//   string uid = 1;
//   Source source = 2;
//   string sink_database = 3;
//
//   int64 interval_seconds = 6;
// }
//
// message Job {
//   // Output only. unique identifier for job
//   string uid = 1;
//
//   // description
//   string desc = 2;
//
//   google.protobuf.Any spec = 6;
//
//   map<string, string> options = 9;
//
//   int64 created = 14;
//   int64 updated = 15;
// }

service KvgoInternal {
  rpc LogRange(LogRangeRequest) returns (LogRangeResponse) {}
  rpc Read(InnerReadRequest) returns (ResultSet) {}
  rpc Range(RangeRequest) returns (ResultSet) {}
}
